//@ sourceMappingURL=Filesize_expression.map
// Generated by CoffeeScript 1.6.1

/*
ファイルサイズ取得
------------------------------------
extension…取得したいファイル形式配列
------------------------------------
fork from filesizeGetter
http://mashimonator.weblike.jp/storage/library/20091118_001/demo/fileSizeGetter/js/fileSizeGetter.js

【使用例】
#ファイルサイズ取得
filesizeOption =
	extension: ['.pdf']
filesizeGet = new Filesize_expression(filesizeOption)
*/


(function() {
  var Filesize_expression;

  Filesize_expression = (function() {

    Filesize_expression.prototype.defaults = {
      /*サイズを取得する対象の拡張子
      */

      extension: ['.png', '.gif', '.jpg', '.jpeg', '.pdf', '.xlsx', '.xls', '.docx', '.doc', '.pptx', '.ppt', '.zip', '.lzh', '.cab', '.txt', '.exe']
    };

    /*初期処理
    */


    function Filesize_expression(options) {
      var href, i, reg, size, x, _i, _j, _ref, _ref1;
      this.options = $.extend({}, this.defaults, options);
      this.extension = this.options.extension;
      this.elements = $('a');
      this.len = this.elements.length;
      this.len2 = this.extension.length;
      for (i = _i = 0, _ref = this.len; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (x = _j = 0, _ref1 = this.len2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          href = this.elements.eq(i).attr('href');
          reg = new RegExp(this.extension[x] + '$', 'i');
          if (href && href.match(reg)) {
            /*サイズ取得
            */

            size = this._getFileSize(href);
            /*サイズを挿入
            */

            if (size) {
              this.elements[i].innerHTML += "[" + (this._convUnit(size)) + "]";
            }
            break;
          }
        }
      }
    }

    /*ファイルサイズを取得する
    */


    Filesize_expression.prototype._getFileSize = function(href) {
      /*HTTP通信用オブジェクト生成
      */

      var httpObj;
      httpObj = this._createXMLHttpRequest();
      if (!httpObj) {
        return false;
      }
      /*同期通信
      */

      httpObj.open('HEAD', href, false);
      try {
        httpObj.send(null);
      } catch (error) {
        /*404 Not Found
        */

        return false;
      }
      /*結果を取得
      */

      if (!httpObj.getResponseHeader('Content-Length')) {
        /*No Content-Length
        */

        return false;
      } else {
        /*Return Content-Length
        */

        if (httpObj.readyState === 4 && httpObj.status === 200) {
          return httpObj.getResponseHeader('Content-Length');
        } else {
          return false;
        }
      }
    };

    /*単位を変換する
    */


    Filesize_expression.prototype._convUnit = function(num) {
      if (num > 1073741824) {
        /*GByte単位変換
        */

        num = num / (1024 * 1024 * 1024);
        return Math.ceil(num) + 'GB';
      } else if (num > 1048576) {
        /*MByte単位変換
        */

        num = num / (1024 * 1024);
        return Math.ceil(num) + 'MB';
      } else if (num > 1024) {
        /*KByte単位変換
        */

        num = num / 1024;
        return Math.ceil(num) + 'KB';
      } else {
        /*Byteの時
        */

        return Math.ceil(num) + 'B';
      }
    };

    /*HTTP通信用オブジェクト生成
    */


    Filesize_expression.prototype._createXMLHttpRequest = function() {
      var XMLhttpObject, i, len, progids, _i;
      XMLhttpObject = null;
      try {
        XMLhttpObject = new XMLHttpRequest();
      } catch (error) {
        progids = new Array('MSXML2.XMLHTTP.5.0', 'MSXML2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP', 'Microsoft.XMLHTTP');
        len = progids.length;
        for (i = _i = 0; 0 <= len ? _i <= len : _i >= len; i = 0 <= len ? ++_i : --_i) {
          try {
            XMLhttpObject = new ActiveXObject(progids[i]);
          } catch (error) {
            XMLhttpObject = null;
          }
        }
      }
      return XMLhttpObject;
    };

    return Filesize_expression;

  })();

}).call(this);
