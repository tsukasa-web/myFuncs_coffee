//@ sourceMappingURL=Hashtab_controller.map
// Generated by CoffeeScript 1.6.1

/*
hashChange対応タブ生成
------------------------------------
optionsによる設定項目
targetContainer…タブのグループの親要素（デフォルトは'#tab-container'）
targetTablist…タブのナビゲーション（デフォルトは'.list-tab'）
targetTabcontent…表示を切り替えたいタブのコンテント要素（デフォルトは'.tab-content'）
animation…アニメーションの有無（デフォルトはtrue）
animSpeed…アニメーションスピード（デフォルトは500ms）
------------------------------------

【使用例】
#タブコンテンツ生成
tabOptions =
	targetContainer: '#tab-container-01'
	targetTablist: '.list-tab-01'
if tabOptions.targetContainer.length
	tabCreate = new Hashtab_controller(tabOptions)
*/


(function() {
  var Hashtab_controller,
    _this = this;

  Hashtab_controller = (function() {
    /*デフォルトオプション
    */

    Hashtab_controller.prototype.defaults = {
      targetContainer: '#tab-container',
      targetTablist: '.list-tab',
      targetTabcontent: '.tab-content',
      animation: true,
      animSpeed: 500
    };

    function Hashtab_controller(options) {
      var _this = this;
      this._onhashChange = function() {
        return Hashtab_controller.prototype._onhashChange.apply(_this, arguments);
      };
      this.options = $.extend({}, this.defaults, options);
      this.targetContainer = $(this.options.targetContainer);
      this.targetTablist = this.targetContainer.find(this.options.targetTablist).find('a');
      this.targetTabcontent = this.targetContainer.find(this.options.targetTabcontent);
      this.tabLength = this.targetTabcontent.length - 1;
      this.indexArray = [];
      this.firstCorrespond = false;
      this._tabInit();
      /*hashイベントの登録
      */

      window.onhashchange = this._onhashChange;
    }

    Hashtab_controller.prototype._tabInit = function() {
      /*各タブのURLを格納
      */

      var n, _i, _ref;
      for (n = _i = 0, _ref = this.tabLength; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
        this.indexArray.push(this.targetTablist.eq(n).attr('href'));
      }
      /*初期表示調整
      */

      this.firstIndex = window.location.hash;
      if ($.inArray(this.firstIndex, this.indexArray) !== -1) {
        this._tabChange(this.firstIndex);
      } else {
        this._tabChange(this.indexArray[0]);
      }
    };

    /*hashChange時のイベント
    */


    Hashtab_controller.prototype._onhashChange = function() {
      this.ChangedIndex = window.location.hash;
      if ($.inArray(this.ChangedIndex, this.indexArray) !== -1) {
        this._tabChange(this.ChangedIndex);
      }
    };

    /*tabの切り替え
    */


    Hashtab_controller.prototype._tabChange = function(targetIndex) {
      var _this = this;
      this.targetTablist.each(function() {
        if (targetIndex === $(this).attr('href')) {
          $(this).addClass('current');
        } else {
          $(this).removeClass('current');
        }
      });
      this.targetTabcontent.each(function(index, element) {
        if (targetIndex === '#' + $(element).attr('id')) {
          _this._animationFadein($(element));
        } else {
          $(element).hide();
        }
      });
    };

    /*アニメーション設定
    */


    Hashtab_controller.prototype._animationFadein = function(target) {
      if (this.options.animation) {
        target.fadeIn(this.options.animSpeed);
      } else {
        target.show();
      }
    };

    return Hashtab_controller;

  })();

}).call(this);
