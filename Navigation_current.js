//@ sourceMappingURL=Navigation_current.map
// Generated by CoffeeScript 1.6.1

/*
ナビゲーションカレント設定
------------------------------------
target…ターゲットのナビゲーションとなる大枠の対象
currentParent…クラスの付け外しをしたい対象の親要素
currentTarget…クラスの付け外しをしたい対象要素
currentDirectClass…現在地となるcurrentTargetに付加されるクラス名
currentParentClass…現在地となるcurrentTargetの親になるcurrentTargetに付加されるクラス名
indexNum…ナビゲーションの階層数（グロナビだと1に相当・デフォルトは1）
------------------------------------

【使用例】
#ナビゲーションカレント
globalnaviOptions =
	targetNavi: '.global-list'
	currentParent: 'ul'
	currentTarget: 'li'
	indexNum: 1
localnaviOptions =
	targetNavi: '.side-list'
	currentParent: 'ul'
	currentTarget: 'li'
    currentDirectClass: '.now'
	currentParentClass: '.now-parent'
	indexNum: 3
globalSet = new Navigation_current(globalnaviOptions)
localSet = new Navigation_current(localnaviOptions)
*/


(function() {
  var Navigation_current;

  Navigation_current = (function() {
    /*デフォルトオプション
    */

    Navigation_current.prototype.defaults = {
      targetNavi: '.global-navigation',
      currentParent: 'ul',
      currentTarget: 'li',
      currentDirectClass: '.current-direct',
      currentParentClass: '.current',
      indexNum: 1
    };

    function Navigation_current(options) {
      this.options = $.extend({}, this.defaults, options);
      this.url = window.location.pathname;
      this.urlArray = [];
      this.urlString = new String();
      this.targetNavi = this.options.targetNavi;
      this.currentParent = this.options.currentParent;
      this.currentTarget = this.options.currentTarget;
      this.classTarget = $(this.targetNavi).find(this.currentTarget);
      this.currentDirectClass = this.options.currentDirectClass;
      this.currentParentClass = this.options.currentParentClass;
      this.indexNum = this.options.indexNum;
      this._urlSpilt();
      this.classTarget.find(this.currentTarget).hide();
      this._currentAdd();
    }

    Navigation_current.prototype._urlSpilt = function() {
      var i, n, _i, _j, _ref;
      for (n = _i = 1, _ref = this.indexNum; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
        for (i = _j = 1; 1 <= n ? _j <= n : _j >= n; i = 1 <= n ? ++_j : --_j) {
          this.urlString += '/' + this.url.split('/')[i];
        }
        if (this.url.split('/')[i] !== void 0) {
          this.urlString += '/';
        }
        this.urlArray.push(this.urlString);
        this.urlString = "";
      }
    };

    Navigation_current.prototype._currentAdd = function() {
      var _this = this;
      this.classTarget.each(function(index, element) {
        var targetElements;
        targetElements = $(element);
        _this.hasUrl = targetElements.find('a').attr('href');
        console.log(_this.urlArray[_this.indexNum - 1]);
        if (_this.urlArray[_this.indexNum - 1] === _this.hasUrl) {
          targetElements.addClass(_this.currentDirectClass);
          return targetElements.parents(_this.currentTarget).each(function(index, element) {
            var elements, n, _i, _ref, _results;
            elements = $(element);
            _results = [];
            for (n = _i = 0, _ref = _this.indexNum; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
              if (_this.urlArray[_this.indexNum - 1] === _this.hasUrl) {
                _results.push(elements.addClass(_this.currentParentClass));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
        }
      });
      $(this.currentParentClass).children(this.currentParent).children(this.currentTarget).show();
    };

    return Navigation_current;

  })();

}).call(this);
